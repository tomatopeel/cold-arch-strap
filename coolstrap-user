#!/bin/bash

die() {
  if [[ ! -z "$1" ]]; then echo "Error: $1" >&2; fi
  echo "Exiting..." >&2; exit 1
}

usage() {
  read -r -d '' TEXT <<-EOF
	Usage: $0 OPTS SCRIPTS...
	
	  OPTS:
	    -d <device>   block device to operate on
	    -u <user>     user username
	    -h            show this help text
	
	  SCRIPTS
	    scripts to run in chroot
	EOF
  echo "$TEXT"
}

## Latest bootstrap image
DATE=$(date -d now '+%Y.%m')
MIRRURL=https://mirrors.kernel.org/archlinux/iso/latest
TARBALL=archlinux-bootstrap-"$DATE".01-x86_64.tar.gz
ROOT=root.x86_64
CHROOT="$ROOT/bin/arch-chroot"

## Download and untar the bootstrap image
ensure_bootstrap_path() {
  if [ ! -d "$ROOT" ]; then
    if [ ! -f "$TARBALL" ]; then
      curl -O "$MIRRURL/$TARBALL" || die "$LINENO: curl failed"
    fi
    tar xzf "$TARBALL" || die "$LINENO: tar failed"
  fi
}

OPTIND=1
DEVICE=
USER_NAME=
SCRIPTS=
while getopts ":d:u:h" opt; do
  case $opt in
    d)
      DEVICE="$OPTARG"
      ;;
    u)
      USER_NAME="$OPTARG"
      ;;
    h)
      usage && exit 0
      ;;
    :)
      echo "Option -$OPTARG requires an argument" >&2
      usage && exit 1
      ;;
    \?)
      echo "Invalid options: -$OPTARG" >&2
      usage && exit 1
      ;;
  esac
done
shift $((OPTIND-1))
SCRIPTS="$@"

(( EUID == 0 )) || die "this script must be run with root privileges"

if [[ -z "$DEVICE" || -z "$USER_NAME" ]]; then
  die "-d <device> and -u <username> required"
fi

ensure_bootstrap_path || die

MOUNT_POINT=mnt
if [[ ! -d "$MOUNT_POINT" ]]; then mkdir "$MOUNT_POINT" || die; fi

cryptsetup open "${DEVICE}1" cryptroot &&
  mount /dev/mapper/cryptroot "$MOUNT_POINT" || die

inject_root_script() {
  SCRIPT="$1"
  shift
  if [[ ! -f "$SCRIPT" ]]; then
    die "$SCRIPT not found!"
  elif [[ ! -x "$SCRIPT" ]]; then
    die "$SCRIPT needs +x!"
  fi
  cp "$SCRIPT" "$MOUNT_POINT/bin/${SCRIPT##*/}" ||
    die "couldn't cp $SCRIPT"
  "$CHROOT" "$MOUNT_POINT" "${SCRIPT##*/}" "$@" ||
    die "$SCRIPT failed"
  rm "$MOUNT_POINT/bin/${SCRIPT##*/}" ||
    die "couldn't rm $SCRIPT"
}

inject_user_script() {
  SCRIPT="$1"
  shift
  if [[ ! -f "$SCRIPT" ]]; then
    die "$SCRIPT not found!"
  elif [[ ! -x "$SCRIPT" ]]; then
    die "$SCRIPT needs +x!"
  fi
  cp "$SCRIPT" "$MOUNT_POINT/bin/${SCRIPT##*/}" ||
    die "couldn't cp $SCRIPT"
  "$CHROOT" "$MOUNT_POINT" su - "$USER_NAME" -c "${SCRIPT##*/} $@" ||
    die "$SCRIPT failed"
  rm "$MOUNT_POINT/bin/${SCRIPT##*/}" ||
    die "couldn't rm $SCRIPT"
}

#user_exists() {
#  "$CHROOT" "$MOUNT_POINT" "id -u $USER_NAME"
#  return "$?"
#}

## if user not exisiting create user and sudo it
## user will become a sudo user
if [[ ! "$("$CHROOT" "$MOUNT_POINT" id -u "$USER_NAME")" ]]; then
  inject_root_script system-scripts/new-user.sh "$USER_NAME"
fi
 
## user scripts, user is sudo so can do sudo stuff
for SCRIPT in "$SCRIPTS"; do
  inject_user_script "$SCRIPT"
done

umount /dev/mapper/cryptroot || die
cryptsetup close cryptroot || die

echo; echo "chroot injector finished!"
exit 0
