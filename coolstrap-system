#!/bin/bash

die() {
  if [[ ! -z "$1" ]]; then echo "Error: $1" >&2; fi
  echo "Exiting..." >&2; exit 1
}

usage() {
  read -r -d '' TEXT <<-EOF
	Usage: $0 OPTS
	
	  OPTS:
	    -d <device>   block device to operate on
	    -n <hostname> system hostname
	    -h            show this help text
	
	  SCRIPTS
	    scripts to run in chroot
	EOF
  echo "$TEXT"
}

## Latest bootstrap image
DATE=$(date -d now '+%Y.%m')
MIRRURL=https://mirrors.kernel.org/archlinux/iso/latest
TARBALL=archlinux-bootstrap-"$DATE".01-x86_64.tar.gz
ROOT=root.x86_64
CHROOT="$ROOT/bin/arch-chroot"

## Download and untar the bootstrap image
ensure_bootstrap_path() {
  if [ ! -d "$ROOT" ]; then
    if [ ! -f "$TARBALL" ]; then
      curl -O "$MIRRURL/$TARBALL" || die "$LINENO: curl failed"
    fi
    tar xzf "$TARBALL" || die "$LINENO: tar failed"
  fi
}

OPTIND=1
DEVICE=
HOST_NAME=
SCRIPTS=
while getopts ":d:n:h" opt; do
  case $opt in
    d)
      DEVICE="$OPTARG"
      ;;
    n)
      HOST_NAME="$OPTARG"
      ;;
    h)
      usage && exit 0
      ;;
    :)
      echo "Option -$OPTARG requires an argument" >&2
      usage && exit 1
      ;;
    \?)
      echo "Invalid options: -$OPTARG" >&2
      usage && exit 1
      ;;
  esac
done
shift $((OPTIND-1))

if [[ -z "$DEVICE" ]]; then
  usage && echo && die "-d <block device> is required" || die
fi

command -v haveged 1>/dev/null || die "haveged dependency is required"

(( EUID == 0 )) || die "this script must be run with root privileges"

read -rs -p "Password/phrase to encrypt the root partition with: " BD_PW || die
echo; read -rs -p "Confirm password/phrase: " || die
if [[ ! $REPLY = $BD_PW ]]; then
  die "Password/phrase mismatch"
fi

ensure_bootstrap_path || die

# Select some repo mirrors in the bootstrap image
LN=$(grep -n "## Worldwide" \
  $ROOT/etc/pacman.d/mirrorlist | cut -d: -f1)
SEDEXP="$((LN+1)),$((LN+3)){s/#Server/Server/}"
sed -i "$SEDEXP" $ROOT/etc/pacman.d/mirrorlist

printf "$DEVICE is:\n\n"
fdisk -l "$DEVICE"
echo; read -p "Are you sure about over-writing this device? (y/n): " -n 1 -r; echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then die; fi
echo; read -p "Are 1000000% sure? There'll be no turning back... (y/n): " -n 1 -r; echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then die; fi

## Format the disk. Unsure of sleep here, maybe sync?
sfdisk "$DEVICE" << EOF && sync || die "couldn't partition with sfdisk"
1MiB,-,L,*
EOF

## Create bootable encrypted root partition
echo -n "$BD_PW" | cryptsetup -v luksFormat "${DEVICE}1" - &&
  echo -n "$BD_PW" | cryptsetup open "${DEVICE}1" "cryptroot" - &&
  mkfs.ext4 "/dev/mapper/cryptroot" ||
  die "$LINENO: couldn't cryptsetup/mkfs/mount ${DEVICE}1"
sleep 1 # get "remove ioctl on ... failed: device or resource busy w/o this
cryptsetup close cryptroot

## Script passed to chroot into bootstrap image directory
SCRIPT=system-scripts/in-bootstrap-chroot.sh
cp "$SCRIPT" "$ROOT/bin/${SCRIPT##*/}"
echo -n "$BD_PW" | "$CHROOT" "$ROOT" "${SCRIPT##*/}" "$DEVICE" ||
  die "$SCRIPT exited"
rm "$ROOT/bin/${SCRIPT##*/}"
unset SCRIPT
sleep 1

umount "$ROOT" >/dev/null 2>&1
sleep 1

mkdir mnt
mount "/dev/mapper/cryptroot" mnt || die "couldn't mount cryptroot"
sleep 1

"$ROOT/usr/bin/genfstab" -U mnt > mnt/etc/fstab

## Use timezone and locale of host
TIMEZONE="$(timedatectl | grep 'Time zone' | awk '{print $3}')"
LOCALE="$(echo "$LANG" | sed 's/\..*$/\.UTF-8/')"

## Usual archlinux install procedure
SCRIPT=system-scripts/in-new-sys-chroot.sh
cp "$SCRIPT" "mnt/bin/${SCRIPT##*/}"
"$CHROOT" mnt "${SCRIPT##*/}" \
  "$DEVICE" "$TIMEZONE" "$LOCALE" "$HOST_NAME"
rm "mnt/bin/${SCRIPT##*/}"
unset SCRIPT
sleep 1

umount /dev/mapper/cryptroot || die "couldn't umount /dev/mapper/cryptroot"
cryptsetup close cryptroot || die "couldn't close cryptroot"
sleep 1

umount mnt >/dev/null 2>&1

echo
echo "Voila!"
