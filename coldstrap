#!/bin/bash

die() {
  if [[ ! -z "$1" ]]; then echo "Error: $1" >&2; fi
  echo "Exiting..." >&2; exit 1
}

usage() {
  read -r -d '' TEXT <<-EOF
	Usage: $0 -d <bd> [ -x <de> -p <pkgs> -u <user> <scripts> ]
	  -d <bd>       block device to operate on
	  -x <de>       desktop environment, from: lxde (todo: add more)
	  -p <pkgs>     additional packages to install from arch repo's
	  -n <hostname> system hostname
	  -u <user>     user username
	  -h            show this help text

	  <scripts>  additional scripts to run from in chroot following install
	EOF
  echo "$TEXT"
}

OPTIND=1
DEVICE=
DESKTOP=
PKGS=
HOSTN=
USER_NAME=
SCRIPTS=
while getopts ":d:x:p:n:u:h" opt; do
  case $opt in
    d)
      DEVICE="$OPTARG"
      ;;
    x)
      DESKTOP="$OPTARG"
      ;;
    p)
      PKGS="$OPTARG"
      ;;
    n)
      HOSTN="$OPTARG"
      ;;
    u)
      USER_NAME="$OPTARG"
      ;;
    h)
      usage && exit 0
      ;;
    :)
      echo "Option -$OPTARG requires an argument" >&2
      usage && exit 1
      ;;
    \?)
      echo "Invalid options: -$OPTARG" >&2
      usage && exit 1
      ;;
  esac
done
shift $((OPTIND-1))

if [[ -z "$DEVICE" ]]; then
  usage && echo && die "-d <block device> is required" || die
fi

command -v haveged 1>/dev/null || die "haveged dependency is required"

(( EUID == 0 )) || die "this script must be run with root privileges"

read -rs -p "Please enter a password to encrypt the root partition with: " BD_PW ||
  die "couldn't get root partition password from input"
echo

if [[ -z "$USER_NAME" ]]; then
  echo "Username not passed with -u flag"
  read -r -p "Please enter a username for the user of the new system: " USER_NAME ||
    die "couldn't get username from input"
fi

read -rs -p "Please enter a password for user '$USER_NAME': " USER_PW ||
  die "couldn't get user password from input"
echo; echo

## Latest bootstrap image
DATE=$(date -d now '+%Y.%m')
MIRRURL=https://mirrors.kernel.org/archlinux/iso/latest
TARBALL=archlinux-bootstrap-"$DATE".01-x86_64.tar.gz

## Download and untar the bootstrap image
if [ ! -d "root.x86_64" ]; then
  if [ ! -f "$TARBALL" ]; then
    curl -O "$MIRRURL/$TARBALL" || die "$LINENO: curl failed"
  fi
  tar xzf "$TARBALL" || die "$LINENO: tar failed"
fi

## Select some repo mirrors in the bootstrap image
LN=$(grep -n "## Worldwide" \
  root.x86_64/etc/pacman.d/mirrorlist | cut -d: -f1)
SEDEXP="$((LN+1)),$((LN+3)){s/#Server/Server/}"
sed -i "$SEDEXP" root.x86_64/etc/pacman.d/mirrorlist

printf "$DEVICE is:\n\n"
fdisk -l "$DEVICE"
echo; read -p "Are you sure about over-writing this device? (y/n): " -n 1 -r; echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then die; fi
echo; read -p "Are you sure you're sure about that? (y/n): " -n 1 -r; echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then die; fi

## Format the disk. Unsure of sleep here, maybe sync?
sfdisk "$DEVICE" << EOF || die "couldn't partition with sfdisk"
1MiB,500MiB,L,*
-,-,L,-
EOF
sleep 1

## Create encrypted boot and root partitions
for i in 1 2; do
  echo -n "$BD_PW" | cryptsetup -v luksFormat "$DEVICE$i" - &&
    echo -n "$BD_PW" | cryptsetup open "$DEVICE$i" "part$i" - &&
    mkfs.ext4 "/dev/mapper/part$i" ||
    die "$LINENO: couldn't cryptsetup/mkfs/mount $DEVICE$i"
  sleep 1 # get "remove ioctl on ... failed: device or resource busy w/o this
  cryptsetup close "part$i"
done
sleep 1

CHROOT=root.x86_64/bin/arch-chroot

## Script passed to chroot into bootstrap image directory
SCRIPT=in-bootstrap-chroot.sh
cp "$SCRIPT" "root.x86_64/usr/bin/$SCRIPT"
echo -n "$BD_PW" | "$CHROOT" root.x86_64 "$SCRIPT" "$DEVICE" ||
  die "$SCRIPT exited"
rm "root.x86_64/usr/bin/$SCRIPT"
unset SCRIPT
sleep 1

umount root.x86_64 >/dev/null 2>&1 
sleep 1

mkdir mnt
mount "/dev/mapper/part2" mnt || die "couldn't mount part2"
sleep 1
mount "/dev/mapper/part1" mnt/boot || die "couldn't mount part1"
sleep 1

root.x86_64/usr/bin/genfstab -U mnt > mnt/etc/fstab

## Use timezone and locale of host
TIMEZONE=$(timedatectl | grep 'Time zone' | awk '{print $3}')
LOCALE=$(locale | grep 'LANG=' | sed 's/LANG=//')

## Usual archlinux install procedure
SCRIPT=in-new-sys-chroot.sh
cp "$SCRIPT" mnt/usr/bin/"$SCRIPT"
echo -n "$USER_PW" | "$CHROOT" mnt "$SCRIPT" \
  "$DEVICE" "$TIMEZONE" "$LOCALE" "$HOSTN" "$USER_NAME"
rm "mnt/usr/bin/$SCRIPT"
unset SCRIPT

sleep 1

if [[ "$DESKTOP" == "lxde" ]]; then
  SCRIPT=install-lxde
  cp "$SCRIPT" "mnt/usr/bin/$SCRIPT"
  root.x86_64/bin/arch-chroot mnt "$SCRIPT" ||
    die "couldn't install lxde"
  rm "mnt/usr/bin/$SCRIPT"
  unset SCRIPT
fi

for SCRIPT in $@; do
  cp "$SCRIPT" "mnt/usr/bin/$SCRIPT" ||
    die "couldn't cp $SCRIPT"
  root.x86_64/bin/arch-chroot mnt "$SCRIPT" ||
    die "couldn't run $SCRIPT"
  rm "mnt/usr/bin/$SCRIPT"
done
unset SCRIPT

for i in 1 2; do
  umount "/dev/mapper/part$i" || die "couldn't umount /dev/mapper/part$i"
  sleep 1
  cryptsetup close "part$i" || die "couldn't close part$i"
  sleep 1
done

umount mnt >/dev/null 2>&1

echo
echo "Voila!"
